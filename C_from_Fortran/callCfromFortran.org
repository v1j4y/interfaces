# -*- mode:org -*-
#+TITLE: Call C from Fortran
#+Author: Vijay
#+email: vijay.gopal.c@gmail.com


* Calling C from Fortran Tutorial

** Introduction

Understanding the standard way of calling C from Fortran is the goal of this
project. The interface should be standard across compilers and platforms.

** TODO [4/4] Basics

- [X] C code

A simple instance for the usage of such an interface can be described
via a simple C code that calculates the binomial coefficient.

#+name: ccodebinom
#+begin_src c :main no #:tangle cfunctions.c
#include <stdio.h>
#include <math.h>
#include <stdint.h>

double logbinom(float n, float k){
    return(lgamma(n+1)-lgamma(n-k+1)-lgamma(k+1));
}

void binom(float n, float k, float *res){
    *res = 0.0;
    *res = (exp(logbinom(n,k)));
}

#+end_src

This function accepts two double (real) numbers \( n, k\) and returns a double
pointer containing the value of the binomial.

- [X] F interface

Now the interface in fortram which describes the input and output variables
which correspond to the c function above.

#+name: interfacecbinom
#+begin_src f90 :main no #:tangle fmain.f90
      module cfunctions
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cbinom(n, k, res) bind(C, name='binom')
         import C_FLOAT
         real(kind=C_FLOAT),value,intent(in) :: n
         real(kind=C_FLOAT),value,intent(in) :: k
         real(kind=C_FLOAT),intent(out) :: res
         end subroutine cbinom
      end interface
      end module cfunctions
#+end_src

This function ~binom~ has been interfaced to Fortran with the name ~cbinom~
which accepts two real numbers \(n,k\) and returns a pointer to a real number
containing the binomial coefficient.

- [X] F program

Now the main program can call the C function.

#+begin_src f90 :main no #:tangle fmain.f90
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions
      implicit none
      real :: n   = 4.0d0
      real :: k   = 2.0d0
      real :: res =-1.0d0
      print *,n,k,res
      call cbinom(n, k, res)
      print *,n,k,res
      end program main
#+end_src

- [X] Compiling and Running

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran 2>&1
./main.exe
#+end_src

#+RESULTS:
| 4.0 | 2.0 | -1.0 |
| 4.0 | 2.0 |  6.0 |

** Passing arrays

*** TODO [3/3] Passing 1D int array

- [X] C function

Passing an array is tricky. One needs to be aware that in Fortran arrays are passed
always by reference and hence the C function will receive a pointer to the first element
of the array.

#+begin_src c :main no #:tangle cfunctions.c

double sum_all(int64_t *vec, int64_t len){
    int result=0;
    for(int i = 0; i < len; i++)
        result += vec[i];

    return(result);
}

void mapsum(int64_t *vec, int64_t *len, int64_t *res){
    *res = sum_all(vec, *len);
}

#+end_src

- [X] Fortran interface

Now the interface in fortram which describes the input and output variables
which correspond to the c function above. Here care has to be taken
to use the corret types.

#+begin_src fortran :main no #:tangle fmain.f90
      module cfunctions_intvec1d
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cmapsum(vec, len, res) bind(C, name='mapsum')
         import C_INT64_T
         integer(kind=C_INT64_T) :: len
         integer(kind=C_INT64_T) :: vec(len)
         integer(kind=C_INT64_T) :: res
         end subroutine cmapsum
      end interface
      end module cfunctions_intvec1d
#+end_src

Now the main program can call the C function. Remember that a 64 bit integer
in C (i.e. ~int64_t~) is equivalent to ~integer*8~ in Fortran.

#+begin_src fortran :main no
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions_intvec1d
      implicit none
      integer*8 :: len = 10
      integer*8, dimension(10) :: vec
      integer*8 :: res = 0
      integer :: i
      print *,len,res
      do i = 1,len
         vec(i) = i
         print *,vec(i)
      end do
      call cmapsum(vec, len, res)
      print *,len,res
      end program main
#+end_src

- [X] Compiling and Running

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran
./main.exe
#+end_src

#+RESULTS: :export none
| 10 |  0 |
|  1 |    |
|  2 |    |
|  3 |    |
|  4 |    |
|  5 |    |
|  6 |    |
|  7 |    |
|  8 |    |
|  9 |    |
| 10 |    |
| 10 | 55 |

***  TODO [3/3] Passing 2D int array

- [X] C function on 2D array

The main thing to be careful about is to make sure that the ordering is properly
accounted for. We follow similar to the 1D case using ~ISO_C_BINDING~.  Striding
is important and needs to be considered when writing the interface module in
Fortran using ~ISO_C_BINDING~.  Remember that the memory layout in Fortran and C
is reversed.  The array layout goes from ~(rows, cols)~ in Fortran to ~[i +
j*rows]~ in C.

#+begin_src C :main no #:tangle cfunctions.c
#include <stdint.h>

double sum2d_all(int64_t *vec2d, int64_t rows,int64_t cols){
    int result=0;
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            printf("---\t %d\n",vec2d[j*rows + i]);
//          printf("---\t %d\n",vec2d[i + j*rows]);
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            result += vec2d[j*rows + i];

    return(result);
}

void mapsum2d(int64_t *vec2d, int64_t rows, int64_t cols, int64_t *res){
    ,*res = sum2d_all(vec2d, rows, cols);
}

#+end_src

- [X] Fortran interface

The important thing here is to carefully give the dimensions.

#+begin_src f90 :main no #:tangle fmain.f90
      module cfunctions_intvec2d
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cmapsum2d(vec2d, rows, cols, res) bind(C, name='mapsum2d')
         import C_INT64_T
         integer(kind=C_INT64_T), value :: rows
         integer(kind=C_INT64_T), value :: cols
         integer(kind=C_INT64_T)        :: vec2d(rows,cols)
         integer(kind=C_INT64_T)        :: res
         end subroutine cmapsum2d
      end interface
      end module cfunctions_intvec2d
#+end_src

- [X] main program

Now the main program can call the C function. Remember that a 64 bit integer
in C (i.e. ~int64_t~) is equivalent to ~integer*8~ in Fortran.

#+begin_src f90 :main no #:tangle fmain.f90
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions_intvec2d
      implicit none
      integer*8 :: rows = 10
      integer*8 :: cols = 2
      integer*8, dimension(10, 2) :: vec2d
      integer*8 :: res = 0
      integer :: i
      integer :: j
      integer :: count=0
      do i = 1,rows
         do j = 1, cols
            vec2d(i,j) = count
            count = count + 1
            print *,vec2d(i,j)
         end do
      end do
      count = 0
      do i = 1,rows
         do j = 1, cols
            count = count + vec2d(i,j)
         end do
      end do
      print *,rows,cols,res, count
      call cmapsum2d(vec2d, rows, cols, res)
      print *,rows, cols, res
      end program main
#+end_src

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran
./main.exe
rm ./main.exe
#+end_src

#+RESULTS:
|   0 |    |     |     |
|   1 |    |     |     |
|   2 |    |     |     |
|   3 |    |     |     |
|   4 |    |     |     |
|   5 |    |     |     |
|   6 |    |     |     |
|   7 |    |     |     |
|   8 |    |     |     |
|   9 |    |     |     |
|  10 |    |     |     |
|  11 |    |     |     |
|  12 |    |     |     |
|  13 |    |     |     |
|  14 |    |     |     |
|  15 |    |     |     |
|  16 |    |     |     |
|  17 |    |     |     |
|  18 |    |     |     |
|  19 |    |     |     |
|  10 |  2 |   0 | 190 |
| --- |  0 |     |     |
| --- |  1 |     |     |
| --- |  2 |     |     |
| --- |  3 |     |     |
| --- |  4 |     |     |
| --- |  5 |     |     |
| --- |  6 |     |     |
| --- |  7 |     |     |
| --- |  8 |     |     |
| --- |  9 |     |     |
| --- | 10 |     |     |
| --- | 11 |     |     |
| --- | 12 |     |     |
| --- | 13 |     |     |
| --- | 14 |     |     |
| --- | 15 |     |     |
| --- | 16 |     |     |
| --- | 17 |     |     |
| --- | 18 |     |     |
| --- | 19 |     |     |
|  10 |  2 | 190 |     |

***  TODO [0/3] Passing 1D float array

- [ ] C function on 2D array

- [ ] Fortran interface

- [ ] main program

***  TODO [3/3] Passing 2D float array

- [X] C function on 2D array

The main thing to be careful about is to make sure that the ordering is properly
accounted for. We follow similar to the 1D case using ~ISO_C_BINDING~.  Striding
is important and needs to be considered when writing the interface module in
Fortran using ~ISO_C_BINDING~.  Remember that the memory layout in Fortran and C
is reversed.  The array layout goes from ~(rows, cols)~ in Fortran to ~[i +
j*rows]~ in C.

#+begin_src C :main no #:tangle cfunctions.c
#include <stdint.h>

double sum2d_all(double *vec2d, int64_t rows,int64_t cols){
    double result=0.0;
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            printf("---\t %14.5f\n",vec2d[j*rows + i]);
//          printf("---\t %d\n",vec2d[i + j*rows]);
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            result += vec2d[j*rows + i];

    return(result);
}

void mapsum2d(double *vec2d, int64_t rows, int64_t cols, double *res){
    ,*res = sum2d_all(vec2d, rows, cols);
}

#+end_src

- [X] Fortran interface

The important thing here is to carefully give the dimensions.

#+begin_src f90 :main no #:tangle fmain.f90
      module cfunctions_intvec2d
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cmapsum2d(vec2d, rows, cols, res) bind(C, name='mapsum2d')
         import C_INT64_T, C_DOUBLE
         integer(kind=C_INT64_T), value :: rows
         integer(kind=C_INT64_T), value :: cols
         real(kind=C_DOUBLE)        :: vec2d(rows,cols)
         real(kind=C_DOUBLE)        :: res
         end subroutine cmapsum2d
      end interface
      end module cfunctions_intvec2d
#+end_src

- [X] main program

Now the main program can call the C function. Remember that a 64 bit integer
in C (i.e. ~int64_t~) is equivalent to ~integer*8~ in Fortran.

#+begin_src f90 :main no #:tangle fmain.f90
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions_intvec2d
      implicit none
      integer*8 :: rows = 10
      integer*8 :: cols = 2
      real*8, dimension(10, 2) :: vec2d
      real*8 :: res = 0
      integer :: i
      integer :: j
      integer :: count=0
      do i = 1,rows
         do j = 1, cols
            vec2d(i,j) = count*1.0
            count = count + 1
            print *,vec2d(i,j)
         end do
      end do
      count = 0
      do i = 1,rows
         do j = 1, cols
            count = count + vec2d(i,j)
         end do
      end do
      print *,rows,cols,res, count
      call cmapsum2d(vec2d, rows, cols, res)
      print *,rows, cols, res
      end program main
#+end_src

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran
./main.exe
rm ./main.exe
#+end_src

#+RESULTS:
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|   10 |    2 |   0.0 | 190 |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|   10 |    2 | 190.0 |     |

***  TODO [3/3] Passing nD <type> array

- [X] C function on 4D array

The main thing to be careful about is to make sure that the ordering is properly
accounted for. We follow similar to the 1D and 2D casees using ~ISO_C_BINDING~.  Striding
is important and needs to be considered when writing the interface module in
Fortran using ~ISO_C_BINDING~.  Remember that the memory layout in Fortran and C
is reversed.  The array layout goes from ~(rows, cols)~ in Fortran to ~[i +
j*rows]~ in C.

#+begin_src C :main no :tangle cfunctions.c
#include <stdint.h>

double sum4d_all(double *vec2d, int64_t rows,int64_t cols){
    double result=0.0;
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            printf("---\t %14.5f\n",vec2d[j*rows + i]);
//          printf("---\t %d\n",vec2d[i + j*rows]);
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            result += vec2d[j*rows + i];

    return(result);
}

void mapsum4d(double *vec2d, int64_t rows, int64_t cols, double *res){
    ,*res = sum4d_all(vec2d, rows, cols);
}

#+end_src


- [X] Fortran interface

The important thing here is to carefully give the dimensions.

#+begin_src f90 :main no :tangle fmain.f90
      module cfunctions_intvec4d
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cmapsum4d(vec2d, rows, cols, res) bind(C, name='mapsum4d')
         import C_INT64_T, C_DOUBLE
         integer(kind=C_INT64_T), value :: rows
         integer(kind=C_INT64_T), value :: cols
         real(kind=C_DOUBLE)        :: vec2d(rows,cols)
         real(kind=C_DOUBLE)        :: res
         end subroutine cmapsum4d
      end interface
      end module cfunctions_intvec4d
#+end_src

- [X] main program


Now the main program can call the C function. Remember that a 64 bit integer
in C (i.e. ~int64_t~) is equivalent to ~integer*8~ in Fortran.

#+begin_src f90 :main no :tangle fmain.f90
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions_intvec4d
      implicit none
      integer*8 :: rows = 10
      integer*8 :: cols = 2
      real*8, dimension(2,2,10, 2) :: vec2d
      real*8 :: res = 0
      integer :: i
      integer :: j,k,l
      integer :: count=0
      do k=1,2
         do l=1,2
            count = 0
            do i = 1,rows
               do j = 1, cols
                  vec2d(k,l,i,j) = count*1.0
                  count = count + 1
                  print *,vec2d(k,l,i,j)
               end do
            end do
         end do
      end do
      count = 0
      do i = 1,rows
         do j = 1, cols
            count = count + vec2d(1,1,i,j)
         end do
      end do
      print *,rows,cols,res, count
      call cmapsum4d(vec2d(1,1,:,:), rows, cols, res)
      call cmapsum4d(vec2d(1,2,:,:), rows, cols, res)
      call cmapsum4d(vec2d(2,1,:,:), rows, cols, res)
      call cmapsum4d(vec2d(2,2,:,:), rows, cols, res)
      print *,rows, cols, res
      end program main
#+end_src

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran
./main.exe
rm ./main.exe
#+end_src

#+RESULTS:
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|   10 |    2 |   0.0 | 190 |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|   10 |    2 | 190.0 |     |


* Passing array blocks

** TODO[0/3] For nD arrays

- [ ] C function on 4D array

The main thing to be careful about is to make sure that the ordering is properly
accounted for. We follow similar to the 1D and 2D casees using ~ISO_C_BINDING~.  Striding
is important and needs to be considered when writing the interface module in
Fortran using ~ISO_C_BINDING~.  Remember that the memory layout in Fortran and C
is reversed.  The array layout goes from ~(rows, cols)~ in Fortran to ~[i +
j*rows]~ in C.

#+begin_src C :main no :tangle cfunctions.c
#include <stdint.h>

double sum4d_all(double *vec2d, int64_t rows,int64_t cols){
    double result=0.0;
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            printf("---\t %14.5f\n",vec2d[j*rows + i]);
//          printf("---\t %d\n",vec2d[i + j*rows]);
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            result += vec2d[j*rows + i];

    return(result);
}

void mapsum4d(double *vec2d, int64_t rows, int64_t cols, double *res){
    ,*res = sum4d_all(vec2d, rows, cols);
}

#+end_src


- [ ] Fortran interface

The important thing here is to carefully give the dimensions.

#+begin_src f90 :main no :tangle fmain.f90
      module cfunctions_intvec4d
      use, intrinsic :: ISO_C_BINDING
      interface
         subroutine cmapsum4d(vec2d, rows, cols, res) bind(C, name='mapsum4d')
         import C_INT64_T, C_DOUBLE
         integer(kind=C_INT64_T), value :: rows
         integer(kind=C_INT64_T), value :: cols
         real(kind=C_DOUBLE)        :: vec2d(rows,cols)
         real(kind=C_DOUBLE)        :: res
         end subroutine cmapsum4d
      end interface
      end module cfunctions_intvec4d
#+end_src

- [ ] main program


Now the main program can call the C function. Remember that a 64 bit integer
in C (i.e. ~int64_t~) is equivalent to ~integer*8~ in Fortran.

#+begin_src f90 :main no :tangle fmain.f90
      program main
      use, intrinsic :: ISO_C_BINDING
      use cfunctions_intvec4d
      implicit none
      integer*8 :: rows = 10
      integer*8 :: cols = 2
      real*8, dimension(2,2,10, 2) :: vec2d
      real*8 :: res = 0
      integer :: i
      integer :: j,k,l
      integer :: count=0
      do k=1,2
         do l=1,2
            count = 0
            do i = 1,rows
               do j = 1, cols
                  vec2d(k,l,i,j) = count*1.0
                  count = count + 1
                  print *,vec2d(k,l,i,j)
               end do
            end do
         end do
      end do
      count = 0
      do i = 1,rows
         do j = 1, cols
            count = count + vec2d(1,1,i,j)
         end do
      end do
      print *,rows,cols,res, count
      call cmapsum4d(vec2d(1,1,:,:), rows, cols, res)
      call cmapsum4d(vec2d(1,2,:,:), rows, cols, res)
      call cmapsum4d(vec2d(2,1,:,:), rows, cols, res)
      call cmapsum4d(vec2d(2,2,:,:), rows, cols, res)
      print *,rows, cols, res
      end program main
#+end_src

#+begin_src shell
gcc -c cfunctions.c
gfortran fmain.f90 cfunctions.o -o main.exe -I/usr/local/include -L/usr/local/lib -lgfortran
./main.exe
rm ./main.exe
#+end_src

#+RESULTS:
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|  0.0 |      |       |     |
|  1.0 |      |       |     |
|  2.0 |      |       |     |
|  3.0 |      |       |     |
|  4.0 |      |       |     |
|  5.0 |      |       |     |
|  6.0 |      |       |     |
|  7.0 |      |       |     |
|  8.0 |      |       |     |
|  9.0 |      |       |     |
| 10.0 |      |       |     |
| 11.0 |      |       |     |
| 12.0 |      |       |     |
| 13.0 |      |       |     |
| 14.0 |      |       |     |
| 15.0 |      |       |     |
| 16.0 |      |       |     |
| 17.0 |      |       |     |
| 18.0 |      |       |     |
| 19.0 |      |       |     |
|   10 |    2 |   0.0 | 190 |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|  --- |  0.0 |       |     |
|  --- |  1.0 |       |     |
|  --- |  2.0 |       |     |
|  --- |  3.0 |       |     |
|  --- |  4.0 |       |     |
|  --- |  5.0 |       |     |
|  --- |  6.0 |       |     |
|  --- |  7.0 |       |     |
|  --- |  8.0 |       |     |
|  --- |  9.0 |       |     |
|  --- | 10.0 |       |     |
|  --- | 11.0 |       |     |
|  --- | 12.0 |       |     |
|  --- | 13.0 |       |     |
|  --- | 14.0 |       |     |
|  --- | 15.0 |       |     |
|  --- | 16.0 |       |     |
|  --- | 17.0 |       |     |
|  --- | 18.0 |       |     |
|  --- | 19.0 |       |     |
|   10 |    2 | 190.0 |     |
